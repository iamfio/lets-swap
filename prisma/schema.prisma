generator client {
  provider = "prisma-client-js"
}

enum ProductStatus {
  FREE
  INRENT
}

enum OwnershipRole {
  OWNER
  TENANT
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  product       Product?  @relation(fields: [productId], references: [id])
  productId     String?
  isOwner       Boolean   @default(true)
}

model Profile {
  id       String   @id @default(cuid())
  username String   @unique
  phoneNr  String?
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique
  address  Address?
}

model Address {
  id        String  @id @default(cuid())
  street    String  @db.VarChar(128)
  houseNr   String  @db.VarChar(12)
  zip       String  @db.VarChar(8)
  city      String  @db.VarChar(120)
  country   String  @db.VarChar(100)
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @unique
}

model Product {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(120)
  description String   @db.Text
  images      String[]
  inRent      Boolean  @default(false)
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
